{
  "name": "Redux-fetch-data",
  "tagline": "Redux utility library for fetching data using promises on both server and client.",
  "body": "# redux-fetch-data\r\n\r\n[![Build Status](https://travis-ci.org/nordsoftware/redux-fetch-data.svg?branch=develop)](https://travis-ci.org/nordsoftware/redux-fetch-data)\r\n[![Test Coverage](https://codeclimate.com/github/nordsoftware/redux-fetch-data/badges/coverage.svg)](https://codeclimate.com/github/nordsoftware/redux-fetch-data/coverage)\r\n[![Code Climate](https://codeclimate.com/github/nordsoftware/redux-fetch-data/badges/gpa.svg)](https://codeclimate.com/github/nordsoftware/redux-fetch-data)\r\n[![npm version](https://img.shields.io/npm/v/redux-fetch-data.svg)](https://www.npmjs.com/package/redux-fetch-data)\r\n[![npm downloads](https://img.shields.io/npm/dt/redux-fetch-data.svg)](https://www.npmjs.com/package/redux-fetch-data)\r\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/nordsoftware/redux-fetch-data/master/LICENSE)\r\n\r\nRedux utility library for fetching data using promises on both server and client.\r\n\r\n## Install\r\n\r\n```bash\r\nnpm install redux-fetch-data --save\r\n```\r\n\r\n## Usage\r\n\r\n### Initial setup\r\n\r\n#### On the server\r\n\r\nHere is an example setup of a simple server. In this example we used Express, but any server framework will do.\r\n\r\n```js\r\nimport Express from 'express';\r\nimport React from 'react';\r\nimport { renderToString } from 'react-dom/server';\r\nimport { match, RouterContext } from 'react-router';\r\nimport { createStore, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { fetchDataOnServer, reducer as fetching } from 'redux-fetch-data';\r\nimport createHistory from 'react-router/lib/createMemoryHistory';\r\n\r\nimport routes from '../../routes';\r\n\r\nconst app = Express();\r\n\r\n// Renders the actual HTML page\r\nfunction renderHtml(html, state) {\r\n  return `\r\n    <!doctype html>\r\n    <html>\r\n      <body>\r\n        <div id=\"root\">${html}</div>\r\n        <script dangerouslySetInnerHTML={{__html: `window.__INITIAL_STATE__=${JSON.stringify(state)};`}}\r\n                charSet=\"UTF-8\"/>\r\n      </body>\r\n    </html>\r\n  `;\r\n}\r\n\r\n// Register the rendering middleware\r\napp.use((req, res) => {\r\n  const history = createHistory(req.originalUrl);\r\n  const store = createStore(combineReducers({ fetching }));\r\n\r\n  match({ routes, location: req.url }, (err, redirect, renderProps) => {\r\n    // Fetch data\r\n    fetchDataOnServer(renderProps, store).then(() => {\r\n      // Data has been fetched, resolve request\r\n      if (err) {\r\n        res.status(500).send(err.message);\r\n      } else if (redirect) {\r\n        res.redirect(redirect.pathname + redirect.search);\r\n      } else if (renderProps) {\r\n        // Render the root component\r\n        const html = renderToString((\r\n          <Provider store={store} key=\"provider\">\r\n            <RouterContext {...renderProps}/>\r\n          </Provider>\r\n        ));\r\n\r\n        // Send the rendered page back to the client\r\n        res.status(200).send(render(html, store.getState()));\r\n      } else {\r\n        res.status(404).send('Not found.');\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\napp.listen(3000);\r\n```\r\n\r\n#### On the client\r\n\r\nHere is an example of an client-side entry script.\r\n\r\n```js\r\nimport React from 'react';\r\nimport { createStore, combineReducers } from 'redux';\r\nimport { render } from 'react-dom';\r\nimport { Router, browserHistory } from 'react-router';\r\nimport { Provider } from 'react-redux';\r\nimport { FetchData, reducer as fetching } from 'redux-fetch-data';\r\n\r\nimport routes from './routes';\r\n\r\n// Hydrate the initial state from the server state\r\nconst initialState = window.__INITIAL_STATE__;\r\nconst store = createStore(combineReducers({ fetching }), initialState);\r\n\r\nrender(\r\n  <Provider store={store} key=\"provider\">\r\n    <Router render={props => <FetchData {...props}/>}\r\n            history={browserHistory}\r\n            routes={routes}/>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n```\r\n\r\n### Fetching data\r\n\r\nInstead of loading data in `componentWillMount`, move that logic to a static `fetchData` method.\r\nThis method should return a promise. Also, make sure you only fetch data from your containers\r\n(top-level components), and pass down the data as props to sub-components.\r\n\r\n```js\r\nexport class Foo extends Component {\r\n  static fetchData() {\r\n    // this method should return a promise\r\n  }\r\n  .....\r\n}\r\n```\r\n\r\n**Protip!** You can use `Promise.all` to combine multiple promises into one.\r\n\r\n## Tests\r\n\r\nRun the test suite:\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\nRun the test suite in watch mode:\r\n\r\n```bash\r\nnpm run test:watch <path>\r\n```\r\n\r\nGenerate the code coverage report:\r\n\r\n```bash\r\nnpm run test:cover\r\n```\r\n\r\n## License\r\n\r\nSee [LICENSE](LICENSE).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}